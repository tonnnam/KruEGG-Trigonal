import streamlit as st
import math
import random
import re

st.set_page_config(page_title="Triangle Trig Game", page_icon="üéØ")
# ‡πÉ‡∏™‡πà‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡πÉ‡∏Å‡∏•‡πâ‡πÜ ‡∏Å‡∏±‡∏ö‡∏™‡πà‡∏ß‡∏ô import ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
def local_css(file_name):
    with open(file_name) as f:
        st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

# ---------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö ----------------------
def parse_answer(user_input: str):
    user_input = user_input.strip()
    user_input = user_input.replace("‚àö", "math.sqrt")

    if re.match(r"^\d+/\d+$", user_input):
        num, den = user_input.split("/")
        return float(num) / float(den)

    try:
        value = eval(user_input, {"math": math})
        return float(value)
    except:
        return None

def check_answer(user_input, correct_value, tol=0.01):
    val = parse_answer(user_input)
    if val is None:
        return False
    return abs(val - correct_value) < tol

# ---------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏à‡∏ó‡∏¢‡πå ----------------------
def ask_basic_trig():
    funcs = ["sin", "cos", "tan"]
    func = random.choice(funcs)
    if func == "tan":
        angles = [15, 30, 37, 45, 60, 75]
    else:
        angles = [15, 30, 37, 45, 60, 75, 90, 120]
    angle = random.choice(angles)

    if func == "sin":
        correct = math.sin(math.radians(angle))
    elif func == "cos":
        correct = math.cos(math.radians(angle))
    else:
        correct = math.tan(math.radians(angle))

    qtype = random.choice(["text", "mcq"])

    if qtype == "mcq":
        wrongs = [round(correct + random.uniform(-0.5, 0.5), 2) for _ in range(3)]
        options = list(set([round(correct, 2)] + wrongs))
        random.shuffle(options)
        return f"‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á {func}({angle}¬∞)", correct, "mcq", options
    else:
        return f"‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á {func}({angle}¬∞)", correct, "text", None

def ask_law_of_sines():
    A = random.choice([30, 45, 60])
    B = random.choice([60, 75, 45])
    a = random.randint(5, 15)
    b = a * math.sin(math.radians(B)) / math.sin(math.radians(A))
    return f"‡∏à‡∏≤‡∏Å‡∏Å‡∏é‡∏Ç‡∏≠‡∏á‡πÑ‡∏ã‡∏ô‡πå: ‡∏ñ‡πâ‡∏≤ A = {A}¬∞, B = {B}¬∞, a = {a}\n‡∏à‡∏á‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏î‡πâ‡∏≤‡∏ô b", b, "text", None

def ask_law_of_cosines():
    a = random.randint(5, 12)
    b = random.randint(5, 12)
    C = random.choice([30, 60, 90, 120])
    c = math.sqrt(a**2 + b**2 - 2*a*b*math.cos(math.radians(C)))
    return f"‡∏à‡∏≤‡∏Å‡∏Å‡∏é‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡πÑ‡∏ã‡∏ô‡πå: ‡∏ñ‡πâ‡∏≤ a = {a}, b = {b}, C = {C}¬∞\n‡∏à‡∏á‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏î‡πâ‡∏≤‡∏ô c", c, "text", None

# ----- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏à‡∏ó‡∏¢‡πå‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡∏î‡πà‡∏≤‡∏ô -----
def generate_new_question():
    level = st.session_state.level
    if level <= 10:
        q_data = ask_basic_trig()
    elif level <= 20:
        q_data = ask_law_of_sines()
    else:
        q_data = ask_law_of_cosines()
    
    st.session_state.question, st.session_state.answer, st.session_state.qtype, st.session_state.options = q_data
    st.session_state.correct_flag = False
    st.session_state.feedback = ""
    st.session_state.user_input = ""


# ---------------------- Init Session ----------------------
def init_game():
    st.session_state.level = 1
    st.session_state.score = 0
    st.session_state.lives = 3 # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    st.session_state.game_over = False
    generate_new_question()

if "level" not in st.session_state:
    init_game()

# ---------------------- UI ----------------------
st.title("üéØ Triangle Trig Game byKASIDIS LAKTAN")
local_css("style.css") # <<< ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ

# --- ‡∏´‡∏ô‡πâ‡∏≤ Game Over ---
if st.session_state.game_over:
    st.error("### GAME OVER! üíî")
    st.write(f"‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: **{st.session_state.score}** ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô")
    if st.button("‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà"):
        init_game()
        st.rerun()

# --- ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏° ---
else:
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Level, Score, Lives
    col1, col2, col3 = st.columns(3)
    col1.metric("üö© ‡∏î‡πà‡∏≤‡∏ô", f"{st.session_state.level}")
    col2.metric("‚≠ê ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô", f"{st.session_state.score}")
    col3.metric("‚ù§Ô∏è ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï", "‚ù§Ô∏è " * st.session_state.lives if st.session_state.lives > 0 else "‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß!")
    st.divider()

    st.subheader("‡πÇ‡∏à‡∏ó‡∏¢‡πå:")
    st.code(st.session_state.question, language=None)

    # --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö ---
    def handle_correct_answer():
        st.session_state.feedback = "‚úÖ ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! ‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å‡∏Ñ‡∏£‡∏±‡∏ö"
        st.session_state.score += 1
        st.session_state.correct_flag = True
        st.balloons()

    def handle_wrong_answer():
        st.session_state.lives -= 1
        correct_answer_formatted = f"{st.session_state.answer:.2f}"
        if st.session_state.lives > 0:
            st.session_state.feedback = f"‚ùå ‡∏ú‡∏¥‡∏î! ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏∑‡∏≠ {correct_answer_formatted}\n‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏™‡∏µ‡∏¢ 1 ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï"
            generate_new_question() # ‡∏™‡∏∏‡πà‡∏°‡πÇ‡∏à‡∏ó‡∏¢‡πå‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏î‡πà‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°
        else:
            st.session_state.feedback = f"‚ùå ‡∏ú‡∏¥‡∏î! ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏∑‡∏≠ {correct_answer_formatted}"
            st.session_state.game_over = True
        st.session_state.correct_flag = False

    # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πâ‡∏≠‡∏¢‡∏™‡πå
    if st.session_state.qtype == "mcq":
        choice = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:", st.session_state.options, key=f"mcq_answer_{st.session_state.level}")
        if st.button("‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö"):
            if abs(choice - st.session_state.answer) < 0.01:
                handle_correct_answer()
            else:
                handle_wrong_answer()
            st.rerun()

    # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏≠‡∏á
    else:
        with st.form(key=f"answer_form_{st.session_state.level}"):
            user_input = st.text_input("‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡πÄ‡∏ä‡πà‡∏ô 3/5, 0.87, ‚àö3/2):", value=st.session_state.user_input)
            submitted = st.form_submit_button("‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö")

        if submitted:
            st.session_state.user_input = user_input
            if check_answer(user_input, st.session_state.answer):
                handle_correct_answer()
            else:
                handle_wrong_answer()
            st.rerun()

    # ‡πÅ‡∏™‡∏î‡∏á feedback
    if st.session_state.feedback:
        if st.session_state.correct_flag:
            st.success(st.session_state.feedback)
            st.markdown(f"<h1 style='font-size:60px; text-align:center'>üíñ</h1>", unsafe_allow_html=True)
        else:
            st.error(st.session_state.feedback)
            st.markdown(f"<div class='heart-float'>üíî</div>", unsafe_allow_html=True)
    
    # ‡∏ñ‡πâ‡∏≤‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å -> ‡πÇ‡∏ä‡∏ß‡πå‡∏õ‡∏∏‡πà‡∏° "‡πÑ‡∏õ‡∏î‡πà‡∏≤‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"
    if st.session_state.correct_flag:
        if st.button("‚û°Ô∏è ‡πÑ‡∏õ‡∏î‡πà‡∏≤‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"):
            st.session_state.level += 1
            generate_new_question()
            st.rerun()

