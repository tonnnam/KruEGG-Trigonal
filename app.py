import streamlit as st
import math
import random
import re

st.set_page_config(page_title="Triangle Trig Game", page_icon="üéØ")

# ---------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö ----------------------
def parse_answer(user_input: str):
    """ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å string ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤ float ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à """
    user_input = user_input.strip()
    user_input = user_input.replace("‚àö", "math.sqrt")  # ‡πÅ‡∏õ‡∏•‡∏á ‚àö ‡πÄ‡∏õ‡πá‡∏ô math.sqrt

    # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏®‡∏©‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏ä‡πà‡∏ô 3/5
    if re.match(r"^\d+/\d+$", user_input):
        num, den = user_input.split("/")
        return float(num) / float(den)

    try:
        # eval ‡πÅ‡∏ï‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î scope
        value = eval(user_input, {"math": math})
        return float(value)
    except:
        return None

def check_answer(user_input, correct_value, tol=0.01):
    val = parse_answer(user_input)
    if val is None:
        return False
    return abs(val - correct_value) < tol

# ---------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏à‡∏ó‡∏¢‡πå ----------------------
def ask_basic_trig():
    funcs = ["sin", "cos", "tan"]
    func = random.choice(funcs)
    angles = [15, 30, 45, 60, 75, 90, 120]
    angle = random.choice(angles)

    if func == "sin":
        correct = round(math.sin(math.radians(angle)), 3)
    elif func == "cos":
        correct = round(math.cos(math.radians(angle)), 3)
    else:
        correct = round(math.tan(math.radians(angle)), 3)

    return f"‡∏´‡∏≤ {func}({angle}¬∞)", correct

def ask_law_of_sines():
    A = random.choice([30, 45, 60])
    B = random.choice([60, 75, 45])
    a = random.randint(5, 15)
    b = round(a * math.sin(math.radians(B)) / math.sin(math.radians(A)), 2)
    return f"‡πÉ‡∏´‡πâ A = {A}¬∞, B = {B}¬∞, a = {a}\n‡∏à‡∏á‡∏´‡∏≤ b", b

def ask_law_of_cosines():
    a = random.randint(5, 12)
    b = random.randint(5, 12)
    C = random.choice([30, 60, 90, 120])
    c = round(math.sqrt(a**2 + b**2 - 2*a*b*math.cos(math.radians(C))), 2)
    return f"‡πÉ‡∏´‡πâ a = {a}, b = {b}, C = {C}¬∞\n‡∏à‡∏á‡∏´‡∏≤ c", c

# ---------------------- Init Session ----------------------
if "level" not in st.session_state:
    st.session_state.level = 1
    st.session_state.score = 0
    st.session_state.question, st.session_state.answer = ask_basic_trig()
    st.session_state.feedback = ""
    st.session_state.correct_flag = False

# ---------------------- UI ----------------------
st.title("üéØ Triangle Trig Game")
st.write(f"**‡∏î‡πà‡∏≤‡∏ô {st.session_state.level}** | ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {st.session_state.score}")

st.write("‡πÇ‡∏à‡∏ó‡∏¢‡πå:")
st.code(st.session_state.question)

# ‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
with st.form(key="answer_form"):
    user_input = st.text_input("‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡πÄ‡∏ä‡πà‡∏ô 3/5, 0.6, ‚àö3/2):")
    submitted = st.form_submit_button("‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö")

if submitted:
    correct = st.session_state.answer
    if check_answer(user_input, correct):
        st.session_state.feedback = "‚úÖ ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!"
        st.session_state.score += 1
        st.session_state.correct_flag = True   # ‡∏ï‡∏±‡πâ‡∏á flag ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°
    else:
        st.session_state.feedback = f"‚ùå ‡∏ú‡∏¥‡∏î! ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏∑‡∏≠ {correct}\n‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏î‡πà‡∏≤‡∏ô 1"
        st.session_state.level = 1
        st.session_state.score = 0
        st.session_state.question, st.session_state.answer = ask_basic_trig()
        st.session_state.correct_flag = False

# ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
if st.session_state.feedback:
    st.info(st.session_state.feedback)

# ‡∏ñ‡πâ‡∏≤‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å -> ‡πÇ‡∏ä‡∏ß‡πå‡∏õ‡∏∏‡πà‡∏° "‡πÑ‡∏õ‡∏î‡πà‡∏≤‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"
if st.session_state.correct_flag:
    if st.button("‚û°Ô∏è ‡πÑ‡∏õ‡∏î‡πà‡∏≤‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"):
        st.session_state.level += 1
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏ï‡∏≤‡∏° level
        if st.session_state.level <= 10:
            st.session_state.question, st.session_state.answer = ask_basic_trig()
        elif st.session_state.level <= 20:
            st.session_state.question, st.session_state.answer = ask_law_of_sines()
        else:
            st.session_state.question, st.session_state.answer = ask_law_of_cosines()
        
        # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï flag ‡πÅ‡∏•‡∏∞ feedback
        st.session_state.correct_flag = False
        st.session_state.feedback = ""
