import streamlit as st
import math
import random
import re

st.set_page_config(page_title="Triangle Trig Game", page_icon="üéØ")

# ---------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö ----------------------
def parse_answer(user_input: str):
    user_input = user_input.strip()
    user_input = user_input.replace("‚àö", "math.sqrt")  # ‡πÅ‡∏õ‡∏•‡∏á ‚àö ‡πÄ‡∏õ‡πá‡∏ô math.sqrt

    # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏®‡∏©‡∏™‡πà‡∏ß‡∏ô ‡πÄ‡∏ä‡πà‡∏ô 3/5
    if re.match(r"^\d+/\d+$", user_input):
        num, den = user_input.split("/")
        return float(num) / float(den)

    try:
        value = eval(user_input, {"math": math})
        return float(value)
    except:
        return None

def check_answer(user_input, correct_value, tol=0.01):
    val = parse_answer(user_input)
    if val is None:
        return False
    return abs(val - correct_value) < tol

# ---------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏à‡∏ó‡∏¢‡πå ----------------------
def ask_basic_trig():
    funcs = ["sin", "cos", "tan"]
    func = random.choice(funcs)
    if func == "tan":
        angles = [15, 30, 37, 45, 60, 75]  # ‡πÑ‡∏°‡πà‡∏°‡∏µ 90¬∞
    else:
        angles = [15, 30, 37, 45, 60, 75, 90, 120]
    angle = random.choice(angles)

    if func == "sin":
        correct = math.sin(math.radians(angle))
    elif func == "cos":
        correct = math.cos(math.radians(angle))
    else:
        correct = math.tan(math.radians(angle))

    # ‡∏™‡∏∏‡πà‡∏°‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ ‡∏°‡∏±‡∏•‡∏ï‡∏¥‡∏ä‡∏≠‡∏¢‡∏™‡πå
    qtype = random.choice(["text", "mcq"])

    if qtype == "mcq":
        wrongs = [round(correct + random.uniform(-0.5, 0.5), 2) for _ in range(3)]
        options = list(set([round(correct, 2)] + wrongs))
        random.shuffle(options)
        return f"‡∏´‡∏≤ {func}({angle}¬∞)", correct, "mcq", options
    else:
        return f"‡∏´‡∏≤ {func}({angle}¬∞)", correct, "text", None

def ask_law_of_sines():
    A = random.choice([30, 45, 60])
    B = random.choice([60, 75, 45])
    a = random.randint(5, 15)
    b = a * math.sin(math.radians(B)) / math.sin(math.radians(A))
    return f"‡πÉ‡∏´‡πâ A = {A}¬∞, B = {B}¬∞, a = {a}\n‡∏à‡∏á‡∏´‡∏≤ b", b, "text", None

def ask_law_of_cosines():
    a = random.randint(5, 12)
    b = random.randint(5, 12)
    C = random.choice([30, 60, 90, 120])
    c = math.sqrt(a**2 + b**2 - 2*a*b*math.cos(math.radians(C)))
    return f"‡πÉ‡∏´‡πâ a = {a}, b = {b}, C = {C}¬∞\n‡∏à‡∏á‡∏´‡∏≤ c", c, "text", None

# ---------------------- Init Session ----------------------
if "level" not in st.session_state:
    st.session_state.level = 1
    st.session_state.score = 0
    st.session_state.question, st.session_state.answer, st.session_state.qtype, st.session_state.options = ask_basic_trig()
    st.session_state.feedback = ""
    st.session_state.correct_flag = False
    st.session_state.user_input = ""
    st.session_state.reset_input = False

# ---------------------- UI ----------------------
st.title("üéØ Triangle Trig Game")
st.write(f"**‡∏î‡πà‡∏≤‡∏ô {st.session_state.level}** | ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {st.session_state.score}")

st.write("‡πÇ‡∏à‡∏ó‡∏¢‡πå:")
st.code(st.session_state.question)

# ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πâ‡∏≠‡∏¢‡∏™‡πå
if st.session_state.qtype == "mcq":
    choice = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:", st.session_state.options, key="mcq_answer")
    if st.button("‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö"):
        if abs(choice - st.session_state.answer) < 0.01:
            st.session_state.feedback = "‚úÖ ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!"
            st.session_state.score += 1
            st.session_state.correct_flag = True
        else:
            st.session_state.feedback = f"‚ùå ‡∏ú‡∏¥‡∏î! ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏∑‡∏≠ {round(st.session_state.answer,2)}\n‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏î‡πà‡∏≤‡∏ô 1"
            st.session_state.level = 1
            st.session_state.score = 0
            st.session_state.question, st.session_state.answer, st.session_state.qtype, st.session_state.options = ask_basic_trig()
            st.session_state.correct_flag = False

# ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏≠‡∏á
else:
    with st.form(key="answer_form"):
        if st.session_state.reset_input:
            st.session_state.user_input = ""
            st.session_state.reset_input = False
        user_input = st.text_input("‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡πÄ‡∏ä‡πà‡∏ô 3/5, 0.6, ‚àö3/2):", value=st.session_state.user_input)
        submitted = st.form_submit_button("‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö")

    if submitted:
        st.session_state.user_input = user_input
        correct = st.session_state.answer
        if check_answer(user_input, correct):
            st.session_state.feedback = "‚úÖ ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!"
            st.session_state.score += 1
            st.session_state.correct_flag = True
        else:
            st.session_state.feedback = f"‚ùå ‡∏ú‡∏¥‡∏î! ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏∑‡∏≠ {round(correct,2)}\n‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏î‡πà‡∏≤‡∏ô 1"
            st.session_state.level = 1
            st.session_state.score = 0
            st.session_state.question, st.session_state.answer, st.session_state.qtype, st.session_state.options = ask_basic_trig()
            st.session_state.correct_flag = False
            st.session_state.reset_input = True

# ‡πÅ‡∏™‡∏î‡∏á feedback
if st.session_state.feedback:
    st.info(st.session_state.feedback)

# ‡∏ñ‡πâ‡∏≤‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å -> ‡πÇ‡∏ä‡∏ß‡πå‡∏õ‡∏∏‡πà‡∏° "‡πÑ‡∏õ‡∏î‡πà‡∏≤‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"
if st.session_state.correct_flag:
    if st.button("‚û°Ô∏è ‡πÑ‡∏õ‡∏î‡πà‡∏≤‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"):
        st.session_state.level += 1
        if st.session_state.level <= 10:
            st.session_state.question, st.session_state.answer, st.session_state.qtype, st.session_state.options = ask_basic_trig()
        elif st.session_state.level <= 20:
            st.session_state.question, st.session_state.answer, st.session_state.qtype, st.session_state.options = ask_law_of_sines()
        else:
            st.session_state.question, st.session_state.answer, st.session_state.qtype, st.session_state.options = ask_law_of_cosines()

        st.session_state.correct_flag = False
        st.session_state.feedback = ""
        st.session_state.reset_input = True
